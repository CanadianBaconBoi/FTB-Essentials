plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
    dev
}

repositories {
    maven {
        url "https://maven.neoforged.net/releases/"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    modImplementation("dev.ftb.mods:ftb-library-neoforge:${rootProject.ftb_library_version}") {
        exclude module: 'me.shedaniel:RoughlyEnoughItems-neoforge'
        transitive false
    }

    modImplementation "dev.ftb.mods:ftb-ranks-neoforge:${rootProject.ftb_ranks_version}"

    compileOnly "net.luckperms:api:5.4"
}

processResources {
    exclude '.cache'

    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version,
                "neoforgeversion": project.neoforge_version,
                "neoforgeloaderversion": project.neoforge_loader_version,
                "mcversion": project.minecraft_version,
                "libraryversion": project.ftb_library_version,
                "ranksversion": project.ftb_ranks_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
    archiveClassifier.set null
    atAccessWideners.add('ftbessentials.accesswidener')
}

jar {
    setArchiveClassifier("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = "${rootProject.archives_base_name}-${project.name}"
            version ftbPublishing.mavenVersion
            from components.java
        }
    }
}
